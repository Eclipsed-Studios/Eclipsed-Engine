
----------------------               SAVING
		
//		if (aReflectedVariable->GetTypeName() == "float")
		//		{
		//			jsonVal = *static_cast<float*>(aReflectedVariable->GetData());
		//		}
		//		else if (aReflectedVariable->GetTypeName() == "int")
		//		{
		//			jsonVal = *static_cast<int*>(aReflectedVariable->GetData());
		//		}
		//		else if (aReflectedVariable->GetTypeName() == "Math::Vector2<float>" || aReflectedVariable->GetTypeName() == "Math::Vector2f")
		//		{
		//			jsonVal = static_cast<Math::Vector2f*>(aReflectedVariable->GetData())->Save(alloc);
		//		}
		//		else if (aReflectedVariable->GetTypeName() == "Math::Vector2<unsigned>" || aReflectedVariable->GetTypeName() == "Math::Vector2ui"
		//			|| aReflectedVariable->GetTypeName() == "Math::Vector2<unsigned int>")
		//		{
		//			jsonVal = static_cast<Math::Vector2ui*>(aReflectedVariable->GetData())->Save(alloc);
		//		}
		//		else if (aReflectedVariable->GetTypeName() == "Math::Vector2<int>" || aReflectedVariable->GetTypeName() == "Math::Vector2i")
		//		{
		//			jsonVal = static_cast<Math::Vector2i*>(aReflectedVariable->GetData())->Save(alloc);
		//		}
		//		else if (aReflectedVariable->GetTypeName() == "Math::Vector2<double>" || aReflectedVariable->GetTypeName() == "Math::Vector2d")
		//		{
		//			jsonVal = static_cast<Math::Vector2d*>(aReflectedVariable->GetData())->Save(alloc);
		//		}
		//
		//		else if (aReflectedVariable->GetTypeName() == "bool")
		//		{
		//			jsonVal = *static_cast<bool*>(aReflectedVariable->GetData());
		//		}
		//		else if (aReflectedVariable->GetTypeName() == "std::string")
		//		{
		//			jsonVal = *static_cast<std::string*>(aReflectedVariable->GetData());
		//		}
		//#ifdef _EDITOR
		//		else
		//		{
		//			auto& var = aReflectedVariable;
		//			DebugLogger::LogWarning("Reflected variable not supported in SceneLoading: " +
		//				std::string(var->GetComponent()->GetComponentName()) +
		//				" | " + var->GetTypeName() + " | " + var->GetName());
		//		}
		//#endif



















---------------------       LOADING



		//memcpy(aReflectedVariable->GetData(), aValue[aReflectedVariable->GetName().c_str()].GetString(), aReflectedVariable->GetSize());


//		if (aReflectedVariable->GetTypeName() == "float")
//		{
//			((ReflectedVariable<float>*)aReflectedVariable)->SetData(aValue[aReflectedVariable->GetName().c_str()].GetFloat());
//		}
//		else if (aReflectedVariable->GetTypeName() == "int")
//		{
//			((ReflectedVariable<int>*)aReflectedVariable)->SetData(aValue[aReflectedVariable->GetName().c_str()].GetInt());
//		}
//		else if (aReflectedVariable->GetTypeName() == "Math::Vector2<float>" || aReflectedVariable->GetTypeName() == "Math::Vector2f")
//		{
//			const rapidjson::Value& val = aValue[aReflectedVariable->GetName().c_str()];
//			((ReflectedVariable<Math::Vector2f>*)aReflectedVariable)->Get().Load(val);
//		}
//		else if (aReflectedVariable->GetTypeName() == "Math::Vector2<unsigned>" || aReflectedVariable->GetTypeName() == "Math::Vector2ui"
//			|| aReflectedVariable->GetTypeName() == "Math::Vector2<unsigned int>")
//		{
//			const rapidjson::Value& val = aValue[aReflectedVariable->GetName().c_str()];
//			((ReflectedVariable<Math::Vector2ui>*)aReflectedVariable)->Get().Load(val);
//		}
//		else if (aReflectedVariable->GetTypeName() == "Math::Vector2<int>" || aReflectedVariable->GetTypeName() == "Math::Vector2i")
//		{
//			const rapidjson::Value& val = aValue[aReflectedVariable->GetName().c_str()];
//			((ReflectedVariable<Math::Vector2i>*)aReflectedVariable)->Get().Load(val);
//		}
//		else if (aReflectedVariable->GetTypeName() == "Math::Vector2<double>" || aReflectedVariable->GetTypeName() == "Math::Vector2d")
//		{
//			const rapidjson::Value& val = aValue[aReflectedVariable->GetName().c_str()];
//			((ReflectedVariable<Math::Vector2d>*)aReflectedVariable)->Get().Load(val);
//		}
//
//		else if (aReflectedVariable->GetTypeName() == "bool")
//		{
//			((ReflectedVariable<bool>*)aReflectedVariable)->SetData(aValue[aReflectedVariable->GetName().c_str()].GetBool());
//		}
//		else if (aReflectedVariable->GetTypeName() == "std::string")
//		{
//			((ReflectedVariable<std::string>*)aReflectedVariable)->SetData(aValue[aReflectedVariable->GetName().c_str()].GetString());
//		}
//#ifdef _EDITOR
//		else
//		{
//			auto& var = aReflectedVariable;
//			DebugLogger::LogWarning("Reflected variable not supported in SceneLoading: " +
//				std::string(var->GetComponent()->GetComponentName()) +
//				" | " + var->GetTypeName() + " | " + var->GetName());
//		}
//#endif